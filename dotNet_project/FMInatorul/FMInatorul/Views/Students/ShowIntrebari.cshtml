@model List<FMInatorul.Models.IntrebariRasp>

@{
    ViewData["Title"] = "Quiz Page";
    var jsonSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
            };
}

<h1 class="text-center text-white">Quiz</h1>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var approvedProfessor = document.getElementById("approved_professor");
        var hasContent = approvedProfessor.querySelector("span").textContent.trim().length > 0;
        if (hasContent) {
            approvedProfessor.classList.add("has-content");
        }
    });
</script>

<div class="card h-100 shadow-sm text-center" style="background: rgba(241, 241, 241, 0.4); backdrop-filter: blur(4px);">
    <p id="progress">Întrebări completate: 0 din @Model.Count</p>
</div>

<div id="quiz-container"></div>

<div id="approved_professor" class="mt-3">
    <img src="~/images/check.svg" height="25px" width="25px" style="filter: invert(88%) sepia(56%) saturate(5043%) hue-rotate(34deg) brightness(101%) contrast(101%);">
    <span class="text-white">All the questions have been approved by a professor.</span>
</div>

<button id="next-question" onclick="showNextQuestion()" style="display:none; margin-top:10px;" class="btn btn-primary">Următoarea întrebare</button>

<p id="score" class="text-center mt-3" style="display: none; font-weight: bold;"></p>

<script>
    var questions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, jsonSettings));
    var currentIndex = 0;
    var correctAnswers = 0;

    function loadQuestion(index) {
        if (index >= questions.length) {
            var container = document.getElementById('quiz-container');
            container.innerHTML = `
                <div class="card shadow-sm p-4 text-center" style="background: rgba(241, 241, 241, 0.7); backdrop-filter: blur(4px); margin-top: 20px;">
                    <h2 class="mb-3">Felicitări!</h2>
                    <p class="fs-5">Ai completat toate întrebările!</p>
                    <p class="fs-5 fw-bold">Scor final: ${correctAnswers} din ${questions.length}</p>
                </div>
            `;
            document.getElementById('next-question').style.display = 'none';
            document.getElementById('score').style.display = 'none';
            return;
        }

        var question = questions[index];
        var container = document.getElementById('quiz-container');

        container.innerHTML = `
            <div class="card h-100 shadow-sm p-3" style="background: rgba(241, 241, 241, 0.4); backdrop-filter: blur(4px);">
                <div class="card-body">
                    <h2>${question.intrebare}</h2>
                    <ul id="options" class="list-unstyled">
                        ${question.Variante.map(v =>
                            `<li class="option-item" data-id="${v.Id}" onclick="selectAnswer(this, ${v.Id})">
                                ${v.Choice}
                            </li>`
                        ).join('')}
                    </ul>
                    <button onclick="checkAnswer()" class="btn btn-success">Verifică răspunsul</button>
                </div>
            </div>
        `;
        updateProgress();
    }

    function selectAnswer(element, id) {
        document.querySelectorAll('.option-item').forEach(el => {
            el.classList.remove('selected', 'correct', 'incorrect', 'highlight');
        });
        element.classList.add('selected', 'highlight');
        element.setAttribute('data-selected', id);
    }

    function checkAnswer() {
        var selectedElement = document.querySelector('.option-item.selected');
        if (!selectedElement) {
            alert('Te rog să selectezi o variantă.');
            return;
        }

        var selectedId = parseInt(selectedElement.getAttribute('data-selected'));
        var correctVariant = questions[currentIndex].Variante.find(v => v.VariantaCorecta === 1);

        if (correctVariant.Id === selectedId) {
            selectedElement.classList.add('correct');
            correctAnswers++;
        } else {
            selectedElement.classList.add('incorrect');
            document.querySelector(`.option-item[data-id="${correctVariant.Id}"]`).classList.add('correct');
        }

        document.getElementById('next-question').style.display = 'inline';
    }

    function showNextQuestion() {
        currentIndex++;
        document.getElementById('next-question').style.display = 'none';
        loadQuestion(currentIndex);
    }

    function updateProgress() {
        document.getElementById('progress').innerText = `Întrebări completate: ${currentIndex + 1} din ${questions.length}`;
    }

    loadQuestion(currentIndex);
</script>

<style>
    .option-item {
        cursor: pointer;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin: 5px 0;
        transition: background-color 0.3s, border 0.3s;
    }

    .option-item.selected {
        background-color: #f0f0f0;
    }

    .option-item.correct {
        background-color: #28a745;
        color: white;
    }

    .option-item.incorrect {
        background-color: #dc3545;
        color: white;
    }

    .option-item.highlight {
        border: 3px solid #ffa500;
    }

    .card.shadow-sm.p-4.text-center {
        max-width: 600px;
        margin: 40px auto;
        border-radius: 10px;
    }
</style>
