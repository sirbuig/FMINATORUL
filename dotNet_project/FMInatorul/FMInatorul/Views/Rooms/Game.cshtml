@model FMInatorul.Models.Room

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Game - @Model.Code</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        body {
            background-color: #333;
            color: #fff;
            padding: 2rem;
        }

        .card-custom {
            background-color: #444;
            border: 1px solid #555;
        }

        .card-custom .card-header {
            background-color: #555;
            border-bottom: 1px solid #666;
        }

        .card-custom .card-body {
            background-color: #444;
        }

        .variant-btn {
            display: block;
            width: 100%;
            margin-bottom: 0.5rem;
            text-align: left;
        }

        #leaderboardContainer {
            display: none;
            background-color: #222;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            box-shadow: 0px 0px 10px rgba(255, 215, 0, 0.7);
        }

        #leaderboardContainer h3 {
            font-size: 1.8rem;
            font-weight: bold;
            color: #FFD700;
            text-shadow: 2px 2px 8px rgba(255, 215, 0, 0.6);
        }

        #leaderboardContainer ul {
            list-style: none;
            padding: 0;
            margin-top: 10px;
        }

        #leaderboardContainer li {
            background-color: #444;
            padding: 10px;
            margin: 5px 0;
            border-radius: 8px;
            font-size: 1.2rem;
            font-weight: bold;
            color: #ddd;
            transition: transform 0.2s ease-in-out;
        }

        #leaderboardContainer li:hover {
            transform: scale(1.05);
            background-color: #555;
        }

        .first-place {
            color: #FFD700 !important;
            font-size: 1.4rem;
            text-shadow: 0px 0px 8px rgba(255, 215, 0, 0.7);
        }

        .second-place {
            color: #C0C0C0 !important;
            font-size: 1.3rem;
            text-shadow: 0px 0px 6px rgba(192, 192, 192, 0.7);
        }

        .third-place {
            color: #CD7F32 !important;
            font-size: 1.2rem;
            text-shadow: 0px 0px 5px rgba(205, 127, 50, 0.7);
        }

        .default-rank {
            color: #ddd;
        }

        #exitGameBtn {
            background-color: #dc3545 !important;
            color: white !important;
            border: none;
            padding: 12px 24px;
            font-size: 1.2rem;
            font-weight: bold;
            border-radius: 8px;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
            box-shadow: 0px 0px 8px rgba(220, 53, 69, 0.7);
        }

        #exitGameBtn:hover {
            background-color: #a71d2a !important;
            box-shadow: 0px 0px 12px rgba(220, 53, 69, 1);
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4 text-uppercase fw-bold text-warning">🔥 The Ultimate Battle of Wits! 🔥</h1>
        <p>Room code: <strong>@Model.Code</strong></p>

        <div id="questionContainer">
            <div class="card card-custom">
                <div class="card-header">
                    <h4 id="questionText" class="mb-0"></h4>
                </div>
                <div class="card-body">
                    <div id="variantsContainer" class="mt-3">

                    </div>
                    <div class="mt-3">
                        Time left:
                        <span id="timer" class="fw-bold">--</span> seconds
                    </div>
                </div>
            </div>
        </div>


        <div id="leaderboardContainer" class="mt-4 card card-custom p-3">

        </div>
    </div>

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/roomHub")
            .build();

        let roomCode = "@Model.Code";

        connection.on("ReceiveQuestion", (questionData, timeLimit) => {
            displayQuestion(questionData);
            startQuestionTimer(timeLimit);
        });

        connection.on("ShowLeaderboard", (leaderboard) => {
            displayLeaderboard(leaderboard);
        });

        connection.on("TriggerNextQuestion", () => {
            connection.invoke("SendNextQuestion", roomCode);
        });

        connection.on("StartGame", () => {

        });

        function displayQuestion(q) {
            const questionTextElem = document.getElementById("questionText");
            questionTextElem.textContent = q.text;

            const variantsContainer = document.getElementById("variantsContainer");
            variantsContainer.innerHTML = "";
            q.variants.forEach(v => {
                let btn = document.createElement("button");
                btn.className = "btn btn-secondary variant-btn";
                btn.textContent = v.choice;
                btn.onclick = () => submitAnswer(q.questionId, v.id);

                variantsContainer.appendChild(btn);
            });
        }

        function submitAnswer(questionId, variantId) {
            connection.invoke("SubmitAnswer", roomCode, questionId, variantId);

            const buttons = document.querySelectorAll(".variant-btn");
            buttons.forEach(b => b.disabled = true);

            let selectedButton = [...buttons].find(b => b.textContent === event.target.textContent);
            selectedButton.style.backgroundColor = "#371F76";
            selectedButton.style.color = "#fff";
        }

        let countdownTimer = null;
        function startQuestionTimer(timeLimit) {
            if (countdownTimer) {
                clearInterval(countdownTimer);
            }
            let timeLeft = timeLimit;

            countdownTimer = setInterval(() => {
                document.getElementById("timer").innerText = timeLeft;
                timeLeft--;
                if (timeLeft < 0) {
                    clearInterval(countdownTimer);
                    connection.invoke("NextQuestion", roomCode);
                }
            }, 1000);
        }

        function displayLeaderboard(leaderboard) {
            document.getElementById("questionContainer").style.display = "none";

            let html = "<h3>🏆 Final Leaderboard 🏆</h3>";
            html += "<ul>";

            leaderboard.forEach((entry, index) => {
                let rankClass = "default-rank";

                if (index === 0) rankClass = "first-place";
                else if (index === 1) rankClass = "second-place";
                else if (index === 2) rankClass = "third-place";

                html += `<li class="${rankClass}"><strong>${entry.fullName}</strong> - ${entry.score} points</li>`;
            });

            html += "</ul>";

            html += `
                <div class="mt-3">
                    <button id="exitGameBtn" class="btn btn-danger">Exit Game</button>
                </div>
            `;

            const lb = document.getElementById("leaderboardContainer");
            lb.innerHTML = html;
            lb.style.display = "block";

            const exitBtn = document.getElementById("exitGameBtn");
            exitBtn.classList.add("btn-danger");
            exitBtn.style.backgroundColor = "#dc3545";
            exitBtn.addEventListener("click", exitGame);
        }

        async function exitGame() {
            try {
                const response = await fetch("/Rooms/LeaveRoom", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(roomCode)
                });

                const data = await response.json();
                if (data.success) {
                    await connection.invoke("LeaveRoomGroup", roomCode);
                    window.location.href = "/Students/Index";
                } else {
                    alert(data.message);
                }
            } catch (err) {
                console.error("Error leaving room:", err);
            }
        }

        connection.start().then(() => {
            connection.invoke("JoinRoomGroup", roomCode).then(() => {
                connection.invoke("SendNextQuestion", roomCode);
            });
        });
    </script>
</body>
</html>
